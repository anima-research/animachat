name: Deploy to arc.animalabs.ai

on:
  push:
    branches: [ main ]
    paths:
      - 'deprecated-claude-app/**'
      - '.github/workflows/deploy.yml'

concurrency:
  group: deployment-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22.14.0'
        cache: 'npm'
        cache-dependency-path: deprecated-claude-app/package-lock.json

    - name: Install dependencies
      working-directory: deprecated-claude-app
      run: npm ci

    - name: Build all workspaces
      working-directory: deprecated-claude-app
      run: |
        npm run build -w shared
        npm run build -w backend
        npm run build -w frontend

    - name: Prepare deployment artifacts
      working-directory: deprecated-claude-app
      run: |
        # Create deployment structure
        mkdir -p deploy/backend deploy/frontend deploy/shared
        
        # Copy frontend build
        cp -r frontend/dist/* deploy/frontend/
        
        # Copy backend build and package.json
        cp -r backend/dist/* deploy/backend/
        cp backend/package.json deploy/backend/
        
        # Copy configuration files
        mkdir -p deploy/backend/config
        cp backend/config/models.json deploy/backend/config/
        # Copy model-access.json if it exists
        if [ -f backend/config/model-access.json ]; then
          cp backend/config/model-access.json deploy/backend/config/
        fi
        
        # Copy shared module (to be copied into node_modules after npm install)
        cp -r shared/dist/* deploy/shared/
        cp shared/package.json deploy/shared/

    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.DEPLOY_HOST }}
        username: ${{ secrets.DEPLOY_USER }}
        key: ${{ secrets.DEPLOY_SSH_KEY }}
        script: |
          # Stop the service using passwordless sudo
          sudo -n systemctl stop claude-app
          
          # Backup data directory if it exists
          if [ -d /var/www/deprecated-claude-app/backend/data ]; then
            echo "Backing up data directory..."
            cp -r /var/www/deprecated-claude-app/backend/data /tmp/claude-app-data-backup
          fi
          
          # Clean deployment directory (no backup needed with GitHub Actions)
          rm -rf /var/www/deprecated-claude-app/backend/*
          rm -rf /var/www/deprecated-claude-app/frontend/*
          rm -rf /var/www/deprecated-claude-app/shared/*
          
          # Restore data directory if backup exists
          if [ -d /tmp/claude-app-data-backup ]; then
            echo "Restoring data directory..."
            mkdir -p /var/www/deprecated-claude-app/backend
            mv /tmp/claude-app-data-backup /var/www/deprecated-claude-app/backend/data
          fi

    - name: Copy files to server
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.DEPLOY_HOST }}
        username: ${{ secrets.DEPLOY_USER }}
        key: ${{ secrets.DEPLOY_SSH_KEY }}
        source: "deprecated-claude-app/deploy/backend,deprecated-claude-app/deploy/frontend,deprecated-claude-app/deploy/shared"
        target: "/var/www/deprecated-claude-app"
        strip_components: 2  # Removes deprecated-claude-app/deploy/ prefix

    - name: Install production dependencies and start service
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.DEPLOY_HOST }}
        username: ${{ secrets.DEPLOY_USER }}
        key: ${{ secrets.DEPLOY_SSH_KEY }}
        script: |
          cd /var/www/deprecated-claude-app/backend
          
          # Install production dependencies
          npm install --omit=dev --no-audit --no-fund
          
          # Copy shared module AFTER npm install (which removes it)
          rm -rf node_modules/@deprecated-claude/shared
          mkdir -p node_modules/@deprecated-claude/shared
          cp -r /var/www/deprecated-claude-app/shared/* node_modules/@deprecated-claude/shared/
          
          # Create config directory and copy configuration files
          sudo -n mkdir -p /etc/claude-app
          sudo -n cp /var/www/deprecated-claude-app/backend/config/models.json /etc/claude-app/models.json
          sudo -n chown www-data:www-data /etc/claude-app/models.json
          sudo -n chmod 644 /etc/claude-app/models.json
          echo "✅ Copied models.json to /etc/claude-app/"
          
          # Copy model-access.json if it exists
          if [ -f /var/www/deprecated-claude-app/backend/config/model-access.json ]; then
            sudo -n cp /var/www/deprecated-claude-app/backend/config/model-access.json /etc/claude-app/model-access.json
            sudo -n chown www-data:www-data /etc/claude-app/model-access.json
            sudo -n chmod 644 /etc/claude-app/model-access.json
            echo "✅ Copied model-access.json to /etc/claude-app/"
          else
            echo "ℹ️ No model-access.json found, using default access policy"
          fi
          
          # Set correct permissions (without sudo since we're already antra)
          # The directory should already have correct permissions from server setup
          
          # Start the service using passwordless sudo
          sudo -n systemctl start claude-app
          
          # Verify deployment
          sleep 2
          if sudo -n systemctl is-active --quiet claude-app; then
            echo "✅ Deployment successful - claude-app is running"
            sudo -n systemctl status claude-app --no-pager
          else
            echo "❌ Deployment failed - claude-app is not running"
            sudo -n journalctl -u claude-app -n 50 --no-pager
            exit 1
          fi

    - name: Health check
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.DEPLOY_HOST }}
        username: ${{ secrets.DEPLOY_USER }}
        key: ${{ secrets.DEPLOY_SSH_KEY }}
        script: |
          # Check if the API is responding
          if curl -f -s http://localhost:3010/api/health > /dev/null 2>&1; then
            echo "✅ API health check passed"
          else
            echo "⚠️ API health check failed or endpoint not available"
          fi
          
          # Check if frontend is accessible
          if curl -f -s https://arc.animalabs.ai > /dev/null 2>&1; then
            echo "✅ Frontend is accessible"
          else
            echo "❌ Frontend is not accessible"
            exit 1
          fi

    - name: Cleanup on failure
      if: failure()
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.DEPLOY_HOST }}
        username: ${{ secrets.DEPLOY_USER }}
        key: ${{ secrets.DEPLOY_SSH_KEY }}
        script: |
          # Restore backup if deployment failed
          if [ -d /var/www/deprecated-claude-app.backup ]; then
            echo "Restoring previous deployment..."
            rm -rf /var/www/deprecated-claude-app
            mv /var/www/deprecated-claude-app.backup /var/www/deprecated-claude-app
            sudo systemctl restart claude-app
          fi
